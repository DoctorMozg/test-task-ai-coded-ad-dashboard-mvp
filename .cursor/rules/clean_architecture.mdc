---
description:
globs:
alwaysApply: true
---
# Clean Architecture Patterns

## Dependency Injection
- Inject dependencies instead of creating them within classes
- Use dependency inversion to decouple high-level modules from low-level modules
- Example:
  ```python
  # GOOD - Dependencies injected
  class TradingStrategy:
      def __init__(self, data_source: DataSource, risk_manager: RiskManager):
          self.data_source = data_source
          self.risk_manager = risk_manager

  # BAD - Hard-coded dependencies
  class TradingStrategy:
      def __init__(self):
          self.data_source = BinanceDataSource()  # Hard-coded dependency
          self.risk_manager = DefaultRiskManager()  # Hard-coded dependency
  ```

## Command Query Separation
- Separate commands (functions that change state) from queries (functions that return values)
- Commands should return None or status information
- Queries should have no side effects
- Example:
  ```python
  # Query: Returns data without side effects
  def get_account_balance(account_id: str) -> float:
      # Return balance without side effects

  # Command: Changes state
  def execute_trade(order: Order) -> TradeResult:
      # Change state and return result
  ```

## Testing Standards
- Write tests for all functionality
- Use pytest for unit tests
- Aim for high test coverage (>90%)
- Write both unit and integration tests
- Use mock objects to isolate units for testing
